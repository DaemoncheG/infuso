<doc>
<name>класс reflex_list</name>
<p title='Описание класса' >
Класс служит для работы с группами объектов<br/><br/>
</p>
<code>
/* Получаем список объектов класса myclass.
Класс myclass должен расширять reflex и быть настроен в соответствии с документацией класса reflex
*/
$list = reflex::get("myclass"); 
foreach($list as $item) {
	// Здесь $item - экземпляр класса myclass
}
</code>
<p title='reflex_list::count()' >
Возвращает количество записей в таблице.
</p>
<code>
echo $list->count(); // Записей всего
echo $list->eq("name","Alexander")->count(); // Количество записей с условием
</code>

<p title='reflex_list::pages()' >
Возвращает количество страниц в выдаче.
</p>

<p title='reflex_list::page()' >
Возвращает / устанавливает текущую страницу. первая страница имеет номер 1
</p>

<p title='reflex_list::limit()' >
Устанавливает количество объектов на страницу
</p>

<p title='reflex_list::eq(..)' >
Устанавливает условие
</p>
<code>
//Варианты использования:
$list->eq("p1",100); // Соответствует sql-запросу ... where `p1`=100
$list->eq("p1",array(1,2,3)); // Соответствует sql-запросу ... where `p1` in (1,2,3)
$list->eq(array('p1'=>12,'p2'=>13)); // Соответствует sql-запросу ... where `p1`=12 and `p2`=13
</code>

<p title='reflex_list::neq($key,$val)' >
Условие неравенства
</p>

<p title='reflex_list::like($key,$val)' >
Условие `$key` LIKE '%$val%'<br/>
Сравнение происходит без учета регистра
</p>

<p title='reflex_list::gt($key,$val)' >
Больше
</p>

<p title='reflex_list::lt($key,$val)' >
Меньше
</p>

<p title='reflex_list::geq($key,$val)' >
Больше =
</p>

<p title='reflex_list::leq($key,$val)' >
Меньше =
</p>

<p title='reflex_list::where($mysql)' >
Добавить произвольное условие mysql. осторожно, не экранируется.
</p>
<code>
$list->where(" `a`+`b`=`c` ");
</code>

<p title='reflex_list::asc($field, [$keep])' >
Восходящая сорировка. Если второй параметр false или опущен, то предыдущие сортировки не учитываются.
Если второй параметр равен true, новая сортировка будет использоваться вместе с предыдущей.
</p>
<code>
$list->desc("date")->asc("priority",true); // Сортировать по дате и приоритету
</code>


<p title='reflex_list::desc($field, [$keep])' >
Низходящая сорировка
</p>

<p title='reflex_list::one()' >
Свести последовательность к одному элементу. Если последовательность пустая,
будет возвращен несуществующий элемент с пустыми полями.
</p>

<p title='reflex_list::title($title)' >
Задает заголовок последовательности для редактора
</p>

<p title='reflex_list::editor($key,$val)' >
Параметр для редактора
</p>
<code>
$list->editor("sort",true); // Включить сортировку в редкторе каталога
</code>

</doc>
