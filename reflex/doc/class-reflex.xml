<doc>
<name>класс reflex</name>
<p title='Описание класса' >
Класс служит оберткой высокого уровня для работы с базой<br/><br/>
Рассмотрим простой пример
</p>
<code>
class myclass extends reflex {
    public function reflex_tables() { return "mytable"; }
}
</code>
<p>
Мы создали класс, связанный с таблицей mytable
(таблица должна быть создана и должна содержать первичный ключ `id`)<br/>
Имея данный клас мы можем работать с таблицей:
</p>
<code>
$item = reflex::get("myclass",13);
print_r($item->data());
// Выведет массив соответствующий строке таблицы `mytable` с `id`=13
</code>
<p title='Конфигурационные функции'>
Механизм использования библиотеки таков: вы создаете новый класс расширяющий reflex и в нем переназначаете
конфигурационные функции, описанные ниже.
</p>
<p title='reflex::reflex_index()'>
Должна вернуть массив списков для последующего вывода в редакторе каталога. Каждый элемент
массива должен быть класса reflex_list.
</p>
<code>
public function reflex_index() {
    return array(
        reflex::get("myclass")->title("Мои объекты"),
        reflex::get("myclass2")->title("Мои объекты2"),
	);
}
</code>

<p title='reflex::reflex_children()'>
Должна вернуть массив списков дочерних объектов для последующего вывода в редакторе каталога. Каждый элемент
массива должен быть класса reflex_list.
</p>
<code>
public reflex_index() {
    return array(
        reflex::get("myclass")->eq("parent",$this->id())->title("Дочерние объекты"),
	);
}
</code>

<p title='reflex::reflex_view()'>
Должна вернуть "list" или "grid" - вид объектов в редакторе каталога. По умолчанию "list"
</p>

<p title='reflex::reflex_url()'>
В стадии разработки
</p>

<p title='reflex::reflex_reflex_storageFolder()'>
Возвращают папку в которой будут находиться файлы хранилища. Эта папка должна
быть открыта для чтения, елси вы хотите хранить в ней, к примеру, фотографии для
публичного доступа.
</p>

<p title='reflex::reflex_storageUseMultipleFolders()'>
Использовать для каждого id свою отдельную папку, или ссыпать все в одну кучу.
По умолчанию true: использовать.
</p>

<p title='reflex::reflex_storageSource()'>
По умолчанию возвращает $this. К примеру, у вас есть таблица со статьями, к каждой
из которых прикреплены фотографии. Фотографии и статьи - экземпляры reflex.
Если вы хотите, чтобы все фотографии одной статьи имели общую папку с файлами,
вам надо написать что-то вроде:
</p>
<code>
class myPhoto {
..
	public funciton reflex_storageSource() {
		return reflex::get("myArticle",$this->data("articleID"));
	}
..
}
</code>

<p title='reflex::reflex_storageKey()'>
Возвращает ключ, который будет использоваться при записи в хранилище.
По умолчанию, это $this->id();
Это необходимо для того, чтобы предотвратить сканирование папок и скачивание всех файлов из хранилища.
Использовав вместо $this->id() md5($this->id().$salt) вы сделаете имя папки уникальным и
не поддающимся перебору.
</p>

<p title='reflex::reflex_afterStorage()'>
Триггер, вызывающийся после изменения файлов (закачивания или удаления). Может использоваться
для пересчета размера файлов или времени последних изменений и записи их в базу
</p>

<p title='reflex::reflex_quickSearch()'>
Должна вернуть поле для быстрого поиска в редкаторе каталога, например "html"
</p>

<p title='reflex::reflex_tables()'>
Должна вернуть имя таблицы
</p>

<p title='reflex::reflex_uploadToField()'>
Должна вернуть поле в которое будет подставлен файл, если создать объект из файла.
</p>

<p title='reflex::reflex_parent()'>
Должна вернуть объект-родитель данного объекта.
</p>

<p title='reflex::reflex_title()'>
Название объъекта
</p>

<p title='reflex::reflex_render()'>
Должна вернуть html код отображения объекта в списке, для редактора.
</p>

<p title='reflex::reflex_beforeCreate()'>
Триггер, выполняется до создания объекта.
</p>

<p title='reflex::reflex_afterCreate()'>
Триггер, выполняется после создания объекта.
</p>

<p title='reflex::reflex_beforeStore()'>
Триггер, выполняется перед сохранением данных в mysql.
</p>

<p title='reflex::reflex_afterStore()'>
Триггер, выполняется после сохранения данных в mysql.
</p>

<p title='reflex::reflex_beforeDelete()'>
Триггер, выполняется перед удалением объекта.
</p>

<p title='reflex::reflex_afterDelete()'>
Триггер, выполняется после удаления объекта.
</p>

<p title='reflex::reflex_cleanup()'>
Функция служит для удаления 'оторванных' объектов, т.е. тех, ссылки на которые не существует.
Может быть использонвана для очистки каталога от ненужных элементов. Если ф-ция вернет true,
данный элемент будет удален. Ф-ция вызывается, когда запущена очистка каталога /reflex/cleanup/ для
каждого элемента класса, отмеченного в info.ini
</p>
<code>
// info.ini
[reflex]
cleanup[] = myclass1
cleanup[] = myclass2

// mycass1
class myclass1 extends reflex {
...

public function reflex_cleanup() {
	$parent = this->data("parent");
	if($parent==0) return false; // Не удаляем элементы, у которых родитель=0, т.к. это корень.
	return !reflex::get("myclass1",$parent)->exists(); // удаляем оторванные элементы
}

...
}
</code>

<p title='reflex::get($class,$id)'>
Если параметр один, вернет список. Если параметра два - объект.
</p>
<code>
// Список
$list = reflex::get("myclass");
foreach($list as $item) {...}
// Объект
$item = reflex::get("myclass",123);

</code>

<p title='reflex::virtual($class,$data)'>
Создает виртуальный объект, без записи в базу.
</p>

<p title='reflex::exists()'>
Существует или нет объект
</p>

<p title='reflex::delete()'>
Удаляет данный объект
</p>

<p title='reflex::create($class,[$data])'>
Создает и возвращает объект
</p>

<p title='reflex::id()'>
Возвращает id объекта
</p>

<p title='reflex::data(..)'>
Возвращает или изменяет данные объекта. ИЗмененные данные будут сохранены в базу
в конце работы скрипта автоматически.
</p>
<code>
$item = reflex::get("myclass",13);

// Вызов без параметров
print_r($item->data()); // array(...) - выведет массив с данными строки

// Вызов с одним параметром
print_r($item->data("text")); // 'preved' (Выведет значение поля 'text')

// Вызов с двумя параметрами
$item->data("text","medved"); // Изменит значение поля `text` на строку 'medved'
// Сохранение в базу произойдет в конце работы скрипта
</code>

<p title='reflex::store()'>
Принудительно сохраняет данный объект в базу.
</p>

<p title='reflex::parents()'>
Возвращает массив - цепочку родителей объекта.
</p>

<p title='reflex::storage()'>
Возвращает объект - файловое хранилище объекта.
</p>


</doc>
